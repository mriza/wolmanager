#!./bin/python
from flask import Flask, render_template, request, redirect, url_for, session, flash
import sqlite3
import os
import re
import socket
from werkzeug.security import generate_password_hash, check_password_hash
from flask_wtf.csrf import CSRFProtect
import datetime
from io import BytesIO
import base64
import json
from apscheduler.schedulers.background import BackgroundScheduler
from dateutil import parser  # Add this import

app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', 'fallback_secret_key')

csrf = CSRFProtect(app)

scheduler = BackgroundScheduler()
scheduler.start()

def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

def send_wol(mac_address):
    if not re.match(r'^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$', mac_address):
        raise ValueError("Invalid MAC address format")
    mac_bytes = bytes.fromhex(mac_address.replace("-", "").replace(":", ""))
    magic_packet = b'\xff' * 6 + mac_bytes * 16
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
        s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        s.sendto(magic_packet, ('255.255.255.255', 9))

def row_to_dict(row):
    return dict(zip(row.keys(), row))  # Update the row_to_dict function

def get_user_by_id(user_id):
    with get_db_connection() as conn:
        row = conn.execute("SELECT * FROM users WHERE id = ?", (user_id,)).fetchone()
        return row_to_dict(row) if row else None

def get_device_count(user_id=None):
    with get_db_connection() as conn:
        if user_id:
            return conn.execute("SELECT COUNT(*) FROM devices WHERE user_id = ?", (user_id,)).fetchone()[0]
        return conn.execute("SELECT COUNT(*) FROM devices").fetchone()[0]

def get_users_count():
    with get_db_connection() as conn:
        return conn.execute("SELECT COUNT(*) FROM users").fetchone()[0]

def is_user_logged_in():
    return 'user' in session

def is_user_admin():
    return session.get('role') == 'admin'

def get_event_history(user_id=None):
    with get_db_connection() as conn:
        if user_id:
            return conn.execute("""
                SELECT e.event_time, e.status, d.device_name, u.username
                FROM events e
                JOIN devices d ON e.device_id = d.id
                JOIN users u ON e.user_id = u.id
                WHERE e.user_id = ?
            """, (user_id,)).fetchall()
        return conn.execute("""
            SELECT e.event_time, e.status, d.device_name, u.username
            FROM events e
            JOIN devices d ON e.device_id = d.id
            JOIN users u ON e.user_id = u.id
        """).fetchall()

def get_wol_event_count(period):
    query = """
        SELECT COUNT(*) FROM events
        WHERE status LIKE 'Success%' AND event_time >= ?
    """
    now = datetime.datetime.now()
    if period == 'today':
        start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
    elif period == 'month':
        start_time = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    elif period == 'year':
        start_time = now.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
    else:
        raise ValueError("Invalid period specified")

    with get_db_connection() as conn:
        return conn.execute(query, (start_time,)).fetchone()[0]

def schedule_wol(device_id, schedule_type, start_time, repeat_count=None):
    with get_db_connection() as conn:
        device = conn.execute("SELECT mac_address FROM devices WHERE id = ?", (device_id,)).fetchone()
        if not device:
            raise ValueError("Device not found")
        mac_address = device['mac_address']
    
    if schedule_type == 'once':
        scheduler.add_job(send_wol, 'date', run_date=start_time, args=[mac_address])
    elif schedule_type == 'daily':
        scheduler.add_job(send_wol, 'interval', days=1, start_date=start_time, args=[mac_address], id=f"{device_id}_daily", replace_existing=True, max_instances=repeat_count)
    elif schedule_type == 'weekly':
        scheduler.add_job(send_wol, 'interval', weeks=1, start_date=start_time, args=[mac_address], id=f"{device_id}_weekly", replace_existing=True, max_instances=repeat_count)
    elif schedule_type == 'monthly':
        scheduler.add_job(send_wol, 'cron', day=start_time.day, hour=start_time.hour, minute=start_time.minute, args=[mac_address], id=f"{device_id}_monthly", replace_existing=True, max_instances=repeat_count)
    else:
        raise ValueError("Invalid schedule type specified")

@app.route('/')
def index():
    if not is_user_logged_in():
        return redirect(url_for('login'))
    return redirect(url_for('dashboard'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        with get_db_connection() as conn:
            user = conn.execute("SELECT * FROM users WHERE username = ?", (username,)).fetchone()
            if user and check_password_hash(user['password'], password):
                session['user'] = user['username']
                session['user_full_name'] = user['full_name']
                session['user_id'] = user['id']
                session['role'] = user['role']
                flash('Login successful!', 'success')
                return redirect(url_for('dashboard'))
            else:
                flash('Invalid username or password', 'danger')
    return render_template('login.html')

@app.route('/dashboard')
def dashboard():
    if not is_user_logged_in():
        return redirect(url_for('login'))

    if is_user_admin():
        num_users = get_users_count()
        num_devices = get_device_count()
    else:
        num_users = None
        num_devices = get_device_count(session['user_id'])

    wol_events_today = get_wol_event_count('today')
    wol_events_month = get_wol_event_count('month')
    wol_events_year = get_wol_event_count('year')

    return render_template('dashboard.html', num_users=num_users, num_devices=num_devices,
                           wol_events_today=wol_events_today, wol_events_month=wol_events_month,
                           wol_events_year=wol_events_year)

@app.route('/users')
def users():
    if not is_user_logged_in():
        return redirect(url_for('login'))
    if not is_user_admin():
        return redirect(url_for('dashboard'))
    with get_db_connection() as conn:
        users = conn.execute("SELECT * FROM users").fetchall()
    return render_template('users.html', users=users)

@app.route('/users/add', methods=['GET', 'POST'])
def add_user():
    if not is_user_logged_in():
        return redirect(url_for('login'))
    if not is_user_admin():
        return redirect(url_for('dashboard'))
    if request.method == 'POST':
        full_name = request.form['full_name']
        email = request.form['email']
        phone = request.form['phone']
        username = request.form['username']
        password = generate_password_hash(request.form['password'])
        role = request.form['role']
        with get_db_connection() as conn:
            try:
                conn.execute(
                    "INSERT INTO users (full_name, email, phone, username, password, role) VALUES (?, ?, ?, ?, ?, ?)",
                    (full_name, email, phone, username, password, role)
                )
                conn.commit()
                flash('User added successfully!', 'success')
                return redirect(url_for('users'))
            except sqlite3.IntegrityError:
                flash('Username already exists!', 'danger')
            except sqlite3.OperationalError as e:
                flash(f'An error occurred while adding the user: {str(e)}', 'danger')
                conn.rollback()
    return render_template('add_user.html')

@app.route('/users/edit/<int:user_id>', methods=['GET', 'POST'])
def edit_user(user_id):
    if not is_user_logged_in():
        return redirect(url_for('login'))
    if not is_user_admin():
        return redirect(url_for('dashboard'))
    with get_db_connection() as conn:
        user = conn.execute("SELECT * FROM users WHERE id = ?", (user_id,)).fetchone()
        if not user:
            flash('User not found!', 'danger')
            return redirect(url_for('users'))
        if request.method == 'POST':
            full_name = request.form['full_name']
            email = request.form['email']
            phone = request.form['phone']
            role = request.form['role']
            new_password = request.form.get('password', '')
            if new_password.strip():
                password = generate_password_hash(new_password)
            else:
                password = user['password']
            try:
                conn.execute(
                    "UPDATE users SET full_name = ?, email = ?, phone = ?, password = ?, role = ? WHERE id = ?",
                    (full_name, email, phone, password, role, user_id)
                )
                conn.commit()
                flash('User updated successfully!', 'success')
                return redirect(url_for('users'))
            except sqlite3.OperationalError as e:
                flash(f'An error occurred while updating the user: {str(e)}', 'danger')
                conn.rollback()
    return render_template('edit_user.html', user=user)

@app.route('/users/delete/<int:user_id>', methods=['POST'])
def delete_user(user_id):
    if not is_user_logged_in():
        return redirect(url_for('login'))
    if not is_user_admin():
        return redirect(url_for('dashboard'))
    with get_db_connection() as conn:
        conn.execute("DELETE FROM users WHERE id = ?", (user_id,))
        conn.commit()
    flash('User deleted successfully!', 'success')
    return redirect(url_for('users'))

@app.route('/devices')
def devices():
    if not is_user_logged_in():
        return redirect(url_for('login'))
    with get_db_connection() as conn:
        if is_user_admin():
            devices = conn.execute("""
                SELECT d.id AS id, d.device_name, d.ip_address, d.mac_address, u.username AS owner_username
                FROM devices d
                JOIN users u ON d.user_id = u.id
            """).fetchall()
        else:
            devices = conn.execute("SELECT * FROM devices WHERE user_id = ?", (session['user_id'],)).fetchall()
    return render_template('devices.html', devices=devices)

@app.route('/devices/add', methods=['GET', 'POST'])
def add_device():
    if not is_user_logged_in():
        return redirect(url_for('login'))
    if request.method == 'POST':
        device_name = request.form['name']
        ip_address = request.form['ip_address']
        mac_address = request.form['mac_address']
        if is_user_admin():
            user_id = request.form.get('user_id', session['user_id'])
        else:
            user_id = session['user_id']
        with get_db_connection() as conn:
            try:
                conn.execute(
                    "INSERT INTO devices (device_name, ip_address, mac_address, user_id) VALUES (?, ?, ?, ?)",
                    (device_name, ip_address, mac_address, user_id)
                )
                conn.commit()
                flash('Device added successfully!', 'success')
                return redirect(url_for('devices'))
            except sqlite3.IntegrityError as e:
                flash(f'Device already exists! Details: {str(e)}', 'danger')
            except sqlite3.OperationalError as e:
                flash(f'Database error! Details: {str(e)}', 'danger')
                conn.rollback()
    users = []
    if is_user_admin():
        with get_db_connection() as conn:
            users = conn.execute("SELECT id, username FROM users").fetchall()
    return render_template('add_device.html', users=users)

@app.route('/devices/edit/<int:device_id>', methods=['GET', 'POST'])
def edit_device(device_id):
    if not is_user_logged_in():
        return redirect(url_for('login'))
    with get_db_connection() as conn:
        if is_user_admin():
            device = conn.execute("SELECT * FROM devices WHERE id = ?", (device_id,)).fetchone()
        else:
            device = conn.execute("SELECT * FROM devices WHERE id = ? AND user_id = ?", (device_id, session['user_id'])).fetchone()
        if not device:
            flash('Device not found or you do not have permission to edit this device.', 'danger')
            return redirect(url_for('devices'))
        if request.method == 'POST':
            device_name = request.form['name']
            ip_address = request.form['ip_address']
            mac_address = request.form['mac_address']
            try:
                conn.execute(
                    "UPDATE devices SET device_name = ?, ip_address = ?, mac_address = ? WHERE id = ?",
                    (device_name, ip_address, mac_address, device_id)
                )
                conn.commit()
                flash('Device updated successfully!', 'success')
                return redirect(url_for('devices'))
            except sqlite3.OperationalError as e:
                flash(f'Database error! Details: {str(e)}', 'danger')
    return render_template('edit_device.html', device=device)

@app.route('/devices/delete/<int:device_id>', methods=['POST'])
def delete_device(device_id):
    if not is_user_logged_in():
        return redirect(url_for('login'))
    with get_db_connection() as conn:
        if is_user_admin():
            conn.execute("DELETE FROM devices WHERE id = ?", (device_id,))
        else:
            conn.execute("DELETE FROM devices WHERE id = ? AND user_id = ?", (device_id, session['user_id']))
        conn.commit()
    flash('Device deleted successfully!', 'success')
    return redirect(url_for('devices'))

@app.route('/start_device/<int:device_id>', methods=['POST'])
def start_device(device_id):
    if not is_user_logged_in():
        return redirect(url_for('login'))
    with get_db_connection() as conn:
        device = conn.execute("SELECT mac_address FROM devices WHERE id = ?", (device_id,)).fetchone()
        if not device:
            flash('Device not found.', 'danger')
            conn.execute(
                "INSERT INTO events (user_id, device_id, event_time, status) VALUES (?, ?, ?, ?)",
                (session['user_id'], device_id, datetime.datetime.now(), 'Failed: Device not found')
            )
            conn.commit()
            return redirect(url_for('devices'))
        mac_address = device['mac_address']
    try:
        send_wol(mac_address)
        flash('Magic packet sent successfully!', 'success')
        status = 'Success'
    except Exception as e:
        flash(f'Failed to send magic packet: {str(e)}', 'danger')
        status = f'Failed: {str(e)}'
    with get_db_connection() as conn:
        conn.execute(
            "INSERT INTO events (user_id, device_id, event_time, status) VALUES (?, ?, ?, ?)",
            (session['user_id'], device_id, datetime.datetime.now(), status)
        )
        conn.commit()
    return redirect(url_for('devices'))

@app.route('/profile', methods=['GET', 'POST'])
def profile():
    if not is_user_logged_in():
        return redirect(url_for('login'))
    with get_db_connection() as conn:
        user = conn.execute("SELECT * FROM users WHERE username = ?", (session['user'],)).fetchone()
        if request.method == 'POST':
            full_name = request.form['full_name']
            email = request.form['email']
            phone = request.form['phone']
            password = request.form['password']
            password_confirm = request.form['password_confirm']
            if not full_name or not email or not phone:
                flash('Full Name, Email, and Phone are required fields.', 'danger')
                return redirect(url_for('profile'))
            if not re.match(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', email):
                flash('Invalid email format.', 'danger')
                return redirect(url_for('profile'))
            if password or password_confirm:
                if password != password_confirm:
                    flash('Passwords do not match.', 'danger')
                    return redirect(url_for('profile'))
                password_hash = generate_password_hash(password)
            else:
                password_hash = user['password']
            try:
                conn.execute(
                    "UPDATE users SET full_name = ?, email = ?, phone = ?, password = ? WHERE username = ?",
                    (full_name, email, phone, password_hash, session['user'])
                )
                conn.commit()
                flash('Profile updated successfully', 'success')
            except sqlite3.OperationalError as e:
                flash(f'An error occurred while updating the profile: {str(e)}', 'danger')
                conn.rollback()
    return render_template('profile.html', user=user)

@app.route('/wol', methods=['POST'])
def wol():
    if not is_user_logged_in():
        return redirect(url_for('login'))
    device_id = request.form['device_id']
    try:
        return redirect(url_for('start_device', device_id=device_id))
    except ValueError as e:
        flash(str(e), 'danger')
    return redirect(url_for('dashboard'))

@app.route('/schedule')
def schedule():
    if not is_user_logged_in():
        return redirect(url_for('login'))
    with get_db_connection() as conn:
        schedules = conn.execute("""
            SELECT s.id, s.device_id, s.start_time, d.device_name
            FROM schedules s
            JOIN devices d ON s.device_id = d.id
            WHERE s.user_id = ?
        """, (session['user_id'],)).fetchall()
    return render_template('schedule.html', schedules=schedules)

@app.route('/schedule/add', methods=['GET', 'POST'])
def add_schedule():
    if not is_user_logged_in():
        return redirect(url_for('login'))
    if request.method == 'POST':
        device_id = request.form['device_id']
        schedule_type = request.form['schedule_type']
        start_time_str = request.form['start_time']
        try:
            start_time = parser.parse(start_time_str)  # Parse the start_time string
        except ValueError:
            flash('Invalid date format', 'danger')
            return redirect(url_for('add_schedule'))
        repeat_count = request.form.get('repeat_count', None)
        if repeat_count:
            repeat_count = int(repeat_count)
        schedule_wol(device_id, schedule_type, start_time, repeat_count)
        with get_db_connection() as conn:
            conn.execute(
                "INSERT INTO schedules (device_id, schedule_type, start_time, repeat_count, user_id) VALUES (?, ?, ?, ?, ?)",
                (device_id, schedule_type, start_time, repeat_count, session['user_id'])
            )
            conn.commit()
        flash('Schedule added successfully!', 'success')
        return redirect(url_for('schedule'))
    with get_db_connection() as conn:
        devices = conn.execute("SELECT * FROM devices WHERE user_id = ?", (session['user_id'],)).fetchall()
    return render_template('add_schedule.html', devices=devices)

@app.route('/schedule/edit/<int:schedule_id>', methods=['GET', 'POST'])
def edit_schedule(schedule_id):
    if not is_user_logged_in():
        return redirect(url_for('login'))
    with get_db_connection() as conn:
        schedule = conn.execute("SELECT * FROM schedules WHERE id = ?", (schedule_id,)).fetchone()
        if not schedule:
            flash('Schedule not found!', 'danger')
            return redirect(url_for('schedule'))
        if request.method == 'POST':
            device_id = request.form['device_id']
            cron_expression = request.form['cron_expression']
            conn.execute(
                "UPDATE schedules SET device_id = ?, cron_expression = ? WHERE id = ?",
                (device_id, cron_expression, schedule_id)
            )
            conn.commit()
            flash('Schedule updated successfully!', 'success')
            return redirect(url_for('schedule'))
    with get_db_connection() as conn:
        devices = conn.execute("SELECT * FROM devices WHERE user_id = ?", (session['user_id'],)).fetchall()
    return render_template('edit_schedule.html', schedule=schedule, devices=devices)

@app.route('/schedule/delete/<int:schedule_id>', methods=['POST'])
def delete_schedule(schedule_id):
    if not is_user_logged_in():
        return redirect(url_for('login'))
    with get_db_connection() as conn:
        conn.execute("DELETE FROM schedules WHERE id = ?", (schedule_id,))
        conn.commit()
    flash('Schedule deleted successfully!', 'success')
    return redirect(url_for('schedule'))

@app.route('/logout')
def logout():
    session.pop('user', None)
    session.pop('role', None)
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)
