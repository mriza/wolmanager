#!./bin/python
from flask import Flask, render_template, request, redirect, url_for, session, flash
import sqlite3
import os
import re
import socket
from werkzeug.security import generate_password_hash, check_password_hash
from flask_wtf.csrf import CSRFProtect

app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', 'fallback_secret_key')

csrf = CSRFProtect(app)  # Enable CSRF protection

# Database connection function
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

# Function to send Wake-on-LAN magic packet
def send_wol(mac_address):
    # Validate MAC address format
    if not re.match(r'^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$', mac_address):
        raise ValueError("Invalid MAC address format")
    mac_bytes = bytes.fromhex(mac_address.replace("-", "").replace(":", ""))
    magic_packet = b'\xff' * 6 + mac_bytes * 16

    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
        s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        s.sendto(magic_packet, ('255.255.255.255', 9))  # Broadcast address

@app.route('/')
def index():
    if 'user' not in session:
        return redirect(url_for('login'))
    return redirect(url_for('dashboard'))

# Login route
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        with get_db_connection() as conn:
            user = conn.execute("SELECT * FROM users WHERE username = ?", (username,)).fetchone()

            if user and check_password_hash(user['password'], password):
                session['user'] = user['username']
                session['user_id'] = user['id']  # Store user_id in session
                session['role'] = user['role']
                flash('Login successful!', 'success')
                return redirect(url_for('dashboard'))
            else:
                flash('Invalid username or password', 'danger')

    return render_template('login.html')

# Dashboard route
@app.route('/dashboard')
def dashboard():
    if 'user' not in session:
        return redirect(url_for('login'))

    with get_db_connection() as conn:
        users_count = conn.execute("SELECT COUNT(*) FROM users").fetchone()[0]
        devices_count = conn.execute("SELECT COUNT(*) FROM devices").fetchone()[0]

    return render_template('dashboard.html', users=users_count, devices=devices_count)

# -------------------------
# User Management (Admin Only)
# -------------------------

# List users (Admin only)
@app.route('/users')
def users():
    if 'user' not in session or session.get('role') != 'admin':
        return redirect(url_for('dashboard'))

    with get_db_connection() as conn:
        users = conn.execute("SELECT * FROM users").fetchall()

    return render_template('users.html', users=users)

# Add user (Admin only)
@app.route('/users/add', methods=['GET', 'POST'])
def add_user():
    if 'user' not in session or session.get('role') != 'admin':
        return redirect(url_for('dashboard'))

    if request.method == 'POST':
        full_name = request.form['full_name']
        email = request.form['email']
        phone = request.form['phone']
        username = request.form['username']
        password = generate_password_hash(request.form['password'])  # Hash password
        role = request.form['role']

        with get_db_connection() as conn:
            try:
                conn.execute(
                    "INSERT INTO users (full_name, email, phone, username, password, role) VALUES (?, ?, ?, ?, ?, ?)",
                    (full_name, email, phone, username, password, role)
                )
                conn.commit()
                flash('User added successfully!', 'success')
                return redirect(url_for('users'))  # Redirect to users page
            except sqlite3.IntegrityError:
                flash('Username already exists!', 'danger')
            except sqlite3.OperationalError as e:
                flash(f'An error occurred while adding the user: {str(e)}', 'danger')
                conn.rollback()

    return render_template('add_user.html')

# Edit user (Admin only)
@app.route('/users/edit/<int:user_id>', methods=['GET', 'POST'])
def edit_user(user_id):
    if 'user' not in session or session.get('role') != 'admin':
        return redirect(url_for('dashboard'))

    with get_db_connection() as conn:
        user = conn.execute("SELECT * FROM users WHERE id = ?", (user_id,)).fetchone()

        if not user:
            flash('User not found!', 'danger')
            return redirect(url_for('users'))

        if request.method == 'POST':
            full_name = request.form['full_name']
            email = request.form['email']
            phone = request.form['phone']
            role = request.form['role']

            # Only update password if a new one is provided, else keep current password.
            new_password = request.form.get('password', '')
            if new_password.strip():
                password = generate_password_hash(new_password)
            else:
                password = user['password']

            try:
                conn.execute(
                    "UPDATE users SET full_name = ?, email = ?, phone = ?, password = ?, role = ? WHERE id = ?",
                    (full_name, email, phone, password, role, user_id)
                )
                conn.commit()
                flash('User updated successfully!', 'success')
                return redirect(url_for('users'))
            except sqlite3.OperationalError as e:
                flash(f'An error occurred while updating the user: {str(e)}', 'danger')
                conn.rollback()

    return render_template('edit_user.html', user=user)

# Delete user (Admin only)
@app.route('/users/delete/<int:user_id>', methods=['POST'])
def delete_user(user_id):
    if 'user' not in session or session.get('role') != 'admin':
        return redirect(url_for('dashboard'))

    with get_db_connection() as conn:
        conn.execute("DELETE FROM users WHERE id = ?", (user_id,))
        conn.commit()

    flash('User deleted successfully!', 'success')
    return redirect(url_for('users'))

# -------------------------
# Device Management
# -------------------------

@app.route('/devices')
def devices():
    if 'user' not in session:
        return redirect(url_for('dashboard'))

    with get_db_connection() as conn:
        if session.get('role') == 'admin':
            # Use aliases to distinguish columns from devices and users tables
            devices = conn.execute(
                """
                SELECT d.id AS id, d.device_name, d.ip_address, d.mac_address, u.username AS owner_username
                FROM devices d
                JOIN users u ON d.user_id = u.id
                """
            ).fetchall()
        else:
            devices = conn.execute("SELECT * FROM devices WHERE user_id = ?", (session['user_id'],)).fetchall()

    return render_template('devices.html', devices=devices)

@app.route('/devices/add', methods=['GET', 'POST'])
def add_device():
    if 'user' not in session:
        return redirect(url_for('dashboard'))

    if request.method == 'POST':
        device_name = request.form['name']
        ip_address = request.form['ip_address']
        mac_address = request.form['mac_address']

        # For non-admin users, always assign the device to themselves.
        # Admins can optionally select a different user for the device.
        if session.get('role') == 'admin':
            # Expecting a field named "user_id" from the form; default to admin's user_id if not provided.
            user_id = request.form.get('user_id', session['user_id'])
        else:
            user_id = session['user_id']

        with get_db_connection() as conn:
            try:
                conn.execute(
                    "INSERT INTO devices (device_name, ip_address, mac_address, user_id) VALUES (?, ?, ?, ?)",
                    (device_name, ip_address, mac_address, user_id)
                )
                conn.commit()
                flash('Device added successfully!', 'success')
                return redirect(url_for('devices'))
            except sqlite3.IntegrityError as e:
                flash(f'Device already exists! Details: {str(e)}', 'danger')
            except sqlite3.OperationalError as e:
                flash(f'Database error! Details: {str(e)}', 'danger')
                conn.rollback()

    users = []
    if session.get('role') == 'admin':
        with get_db_connection() as conn:
            users = conn.execute("SELECT id, username FROM users").fetchall()

    return render_template('add_device.html', users=users)

@app.route('/devices/edit/<int:device_id>', methods=['GET', 'POST'])
def edit_device(device_id):
    if 'user' not in session:
        return redirect(url_for('dashboard'))

    with get_db_connection() as conn:
        # Admins can edit any device; non-admins can only edit their own devices.
        if session.get('role') == 'admin':
            device = conn.execute("SELECT * FROM devices WHERE id = ?", (device_id,)).fetchone()
        else:
            device = conn.execute("SELECT * FROM devices WHERE id = ? AND user_id = ?", (device_id, session['user_id'])).fetchone()

        if not device:
            flash('Device not found or you do not have permission to edit this device.', 'danger')
            return redirect(url_for('devices'))

        if request.method == 'POST':
            device_name = request.form['name']
            ip_address = request.form['ip_address']
            mac_address = request.form['mac_address']

            try:
                conn.execute(
                    "UPDATE devices SET device_name = ?, ip_address = ?, mac_address = ? WHERE id = ?",
                    (device_name, ip_address, mac_address, device_id)
                )
                conn.commit()
                flash('Device updated successfully!', 'success')
                return redirect(url_for('devices'))
            except sqlite3.OperationalError as e:
                flash(f'Database error! Details: {str(e)}', 'danger')

    return render_template('edit_device.html', device=device)

@app.route('/devices/delete/<int:device_id>', methods=['POST'])
def delete_device(device_id):
    if 'user' not in session:
        return redirect(url_for('dashboard'))

    with get_db_connection() as conn:
        # Admins can delete any device; non-admins can only delete their own devices.
        if session.get('role') == 'admin':
            conn.execute("DELETE FROM devices WHERE id = ?", (device_id,))
        else:
            conn.execute("DELETE FROM devices WHERE id = ? AND user_id = ?", (device_id, session['user_id']))
        conn.commit()

    flash('Device deleted successfully!', 'success')
    return redirect(url_for('devices'))

@app.route('/start_device/<mac_address>')
def start_device(mac_address):
    if 'user' not in session:
        return redirect(url_for('dashboard'))

    try:
        send_wol(mac_address)
        flash('Magic packet sent successfully!', 'success')
    except Exception as e:
        flash(f'Failed to send magic packet: {str(e)}', 'danger')
    return redirect(url_for('devices'))

# -------------------------
# Profile Management
# -------------------------

@app.route('/profile', methods=['GET', 'POST'])
def profile():
    if 'user' not in session:
        return redirect(url_for('login'))

    with get_db_connection() as conn:
        user = conn.execute("SELECT * FROM users WHERE username = ?", (session['user'],)).fetchone()

        if request.method == 'POST':
            full_name = request.form['full_name']
            email = request.form['email']
            phone = request.form['phone']
            password = request.form['password']
            password_confirm = request.form['password_confirm']

            # Validate required fields
            if not full_name or not email or not phone:
                flash('Full Name, Email, and Phone are required fields.', 'danger')
                return redirect(url_for('profile'))

            # Validate email format
            if not re.match(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', email):
                flash('Invalid email format.', 'danger')
                return redirect(url_for('profile'))

            # Validate password confirmation if provided
            if password or password_confirm:
                if password != password_confirm:
                    flash('Passwords do not match.', 'danger')
                    return redirect(url_for('profile'))
                password_hash = generate_password_hash(password)
            else:
                password_hash = user['password']

            try:
                conn.execute(
                    "UPDATE users SET full_name = ?, email = ?, phone = ?, password = ? WHERE username = ?",
                    (full_name, email, phone, password_hash, session['user'])
                )
                conn.commit()
                flash('Profile updated successfully', 'success')
            except sqlite3.OperationalError as e:
                flash(f'An error occurred while updating the profile: {str(e)}', 'danger')
                conn.rollback()

    return render_template('profile.html', user=user)

# -------------------------
# Wake-on-LAN
# -------------------------

@app.route('/wol', methods=['POST'])
def wol():
    if 'user' not in session:
        return redirect(url_for('login'))

    mac_address = request.form['mac_address']
    try:
        send_wol(mac_address)
        flash(f'Magic packet sent to {mac_address}', 'success')
    except ValueError as e:
        flash(str(e), 'danger')

    return redirect(url_for('dashboard'))

# -------------------------
# Logout
# -------------------------

@app.route('/logout')
def logout():
    session.pop('user', None)
    session.pop('role', None)
    return redirect(url_for('login'))

# Run the app
if __name__ == '__main__':
    app.run(debug=True)
